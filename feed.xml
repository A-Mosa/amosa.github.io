<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://amosa.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://amosa.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-03-08T11:53:06+00:00</updated><id>https://amosa.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Map, Reduce and Filter in JavaScript</title><link href="https://amosa.github.io/blog/2022/javascript-map-reduce-filter/" rel="alternate" type="text/html" title="Map, Reduce and Filter in JavaScript"/><published>2022-12-26T11:12:00+00:00</published><updated>2022-12-26T11:12:00+00:00</updated><id>https://amosa.github.io/blog/2022/javascript-map-reduce-filter</id><content type="html" xml:base="https://amosa.github.io/blog/2022/javascript-map-reduce-filter/"><![CDATA[<p><strong>Map</strong>, <strong>Reduce</strong> and <strong>Filter</strong> are three declarative and higher-order array methods that are particularly important in JavaScript applications and even the majority of all modern programming languages. Each of these three methods iterates over a given array and performs specific actions. Steven Luscher humorously described them in a single tweet, as shown below.</p> <div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Map/filter/reduce in a tweet:<br/><br/>map([üåΩ, üêÆ, üêî], cook)<br/>=&gt; [üçø, üçî, üç≥]<br/><br/>filter([üçø, üçî, üç≥], isVegetarian)<br/>=&gt; [üçø, üç≥]<br/><br/>reduce([üçø, üç≥], eat)<br/>=&gt; üí©</p>&mdash; Steven Luscher (@steveluscher) <a href="https://twitter.com/steveluscher/status/741089564329054208?ref_src=twsrc%5Etfw">June 10, 2016</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <h3 id="the-map-method">The map Method</h3> <p>The map(callback) method returns a new array by applying the given callback function to every element of the given array. Let‚Äôs initially declare an array of books, where each book is an object, as follows:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/booksArray.png" class="img-fluid rounded " width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Now, let‚Äôs see how to use the map() method to map the details of each book into a sentence.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/map.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Remember that the¬†map method returns a new array, so it is an anti-pattern not to use the returned array. Therefore, it would be better to use the forEach or for‚Ä¶of loops if you are not going to use the returned array or if the used callback does not return a value.</p> <h3 id="the-filter-method">The filter Method</h3> <p>The filter(callback) method creates a new array with all elements that pass the condition made by the given callback function. The filter() method would return an empty array if all elements did not pass the condition. The following code snippet uses the filter() method to return books that have been published after 2018.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/filter.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>In addition, the following code snippet shows how to apply the map() method to the filtered data so that we can return textual descriptions of the recent JavaScript books.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/mapFiltered.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="the-reduce-method">The reduce Method</h3> <p>As in map and filter, the reduce(callback) executes the given callback function (known as a reducer) on each element of the array, in order, while passing in the previously calculated value from the previous array element to the next element and returning a single value by the end. The following code snippet shows how to use the reduce method to calculate the sum of all elements in the array.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/reduce.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>If you did not specify an initial value, the reduce method will use the element at index 0 as the initial value, and the calculation starts from the second element (element at index 1).¬†</p>]]></content><author><name></name></author><category term="JavaScript"/><category term="external-services"/><category term="map,"/><category term="reduce,"/><category term="filter,"/><category term="declarative,"/><category term="high-order"/><summary type="html"><![CDATA[Understanding map, reduce and filter in JavaScript]]></summary></entry><entry><title type="html">JavaScript Type System</title><link href="https://amosa.github.io/blog/2022/javascript-type-system/" rel="alternate" type="text/html" title="JavaScript Type System"/><published>2022-12-24T20:05:00+00:00</published><updated>2022-12-24T20:05:00+00:00</updated><id>https://amosa.github.io/blog/2022/javascript-type-system</id><content type="html" xml:base="https://amosa.github.io/blog/2022/javascript-type-system/"><![CDATA[<blockquote> JavaScript is known to be dynamically and weakly or loosely typed. </blockquote> <p>In any programming language, the <b>type system </b> is usually built into the compiler or interpreter to assign a <b>type to a value </b> or any programming construct (such as variables and functions) and specify the <b>allowed operations</b> on each data type. The type system is useful in several aspects, such as reducing type errors and enabling certain compiler optimizations. Programming languages can check for the type during <b>compile time (static)</b>, <b>run time (dynamic)</b>, or at <b>both</b>. Programming languages are classified based on the type checking (<strong>static vs dynamic</strong>) and the type safety (<strong>strong vs weak</strong>). So, let‚Äôs try to understand the difference between them.</p> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1678276386687" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width: 499.4296875px;" viewBox="0 0 499.4296875 318"><style>#mermaid-1678276386687 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1678276386687 .node circle,#mermaid-1678276386687 .node ellipse,#mermaid-1678276386687 .node polygon,#mermaid-1678276386687 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1678276386687 .node.clickable{cursor:pointer}#mermaid-1678276386687 .arrowheadPath{fill:#333}#mermaid-1678276386687 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1678276386687 .edgeLabel{background-color:#e8e8e8}#mermaid-1678276386687 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1678276386687 .cluster text{fill:#333}#mermaid-1678276386687 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1678276386687 .actor{stroke:#ccf;fill:#ececff}#mermaid-1678276386687 text.actor{fill:#000;stroke:none}#mermaid-1678276386687 .actor-line{stroke:grey}#mermaid-1678276386687 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1678276386687 .messageLine0,#mermaid-1678276386687 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1678276386687 #arrowhead{fill:#333}#mermaid-1678276386687 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1678276386687 .messageText{fill:#333;stroke:none}#mermaid-1678276386687 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1678276386687 .labelText,#mermaid-1678276386687 .loopText{fill:#000;stroke:none}#mermaid-1678276386687 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1678276386687 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1678276386687 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1678276386687 .section{stroke:none;opacity:.2}#mermaid-1678276386687 .section0{fill:rgba(102,102,255,.49)}#mermaid-1678276386687 .section2{fill:#fff400}#mermaid-1678276386687 .section1,#mermaid-1678276386687 .section3{fill:#fff;opacity:.2}#mermaid-1678276386687 .sectionTitle0,#mermaid-1678276386687 .sectionTitle1,#mermaid-1678276386687 .sectionTitle2,#mermaid-1678276386687 .sectionTitle3{fill:#333}#mermaid-1678276386687 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1678276386687 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1678276386687 .grid path{stroke-width:0}#mermaid-1678276386687 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1678276386687 .task{stroke-width:2}#mermaid-1678276386687 .taskText{text-anchor:middle;font-size:11px}#mermaid-1678276386687 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1678276386687 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1678276386687 .taskText0,#mermaid-1678276386687 .taskText1,#mermaid-1678276386687 .taskText2,#mermaid-1678276386687 .taskText3{fill:#fff}#mermaid-1678276386687 .task0,#mermaid-1678276386687 .task1,#mermaid-1678276386687 .task2,#mermaid-1678276386687 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1678276386687 .taskTextOutside0,#mermaid-1678276386687 .taskTextOutside1,#mermaid-1678276386687 .taskTextOutside2,#mermaid-1678276386687 .taskTextOutside3{fill:#000}#mermaid-1678276386687 .active0,#mermaid-1678276386687 .active1,#mermaid-1678276386687 .active2,#mermaid-1678276386687 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1678276386687 .activeText0,#mermaid-1678276386687 .activeText1,#mermaid-1678276386687 .activeText2,#mermaid-1678276386687 .activeText3{fill:#000!important}#mermaid-1678276386687 .done0,#mermaid-1678276386687 .done1,#mermaid-1678276386687 .done2,#mermaid-1678276386687 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1678276386687 .doneText0,#mermaid-1678276386687 .doneText1,#mermaid-1678276386687 .doneText2,#mermaid-1678276386687 .doneText3{fill:#000!important}#mermaid-1678276386687 .crit0,#mermaid-1678276386687 .crit1,#mermaid-1678276386687 .crit2,#mermaid-1678276386687 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1678276386687 .activeCrit0,#mermaid-1678276386687 .activeCrit1,#mermaid-1678276386687 .activeCrit2,#mermaid-1678276386687 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1678276386687 .doneCrit0,#mermaid-1678276386687 .doneCrit1,#mermaid-1678276386687 .doneCrit2,#mermaid-1678276386687 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1678276386687 .activeCritText0,#mermaid-1678276386687 .activeCritText1,#mermaid-1678276386687 .activeCritText2,#mermaid-1678276386687 .activeCritText3,#mermaid-1678276386687 .doneCritText0,#mermaid-1678276386687 .doneCritText1,#mermaid-1678276386687 .doneCritText2,#mermaid-1678276386687 .doneCritText3{fill:#000!important}#mermaid-1678276386687 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1678276386687 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1678276386687 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1678276386687 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1678276386687 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1678276386687 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1678276386687 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1678276386687 #compositionEnd,#mermaid-1678276386687 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1678276386687 #aggregationEnd,#mermaid-1678276386687 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1678276386687 #dependencyEnd,#mermaid-1678276386687 #dependencyStart,#mermaid-1678276386687 #extensionEnd,#mermaid-1678276386687 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1678276386687 .branch-label,#mermaid-1678276386687 .commit-id,#mermaid-1678276386687 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1678276386687{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g transform="translate(-12, -12)"><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath" style="opacity: 1;"><path class="path" d="M219.3467684659091,58L151.02734375,83L151.02734375,108" marker-end="url(#arrowhead24)" style="fill:none"></path><defs><marker id="arrowhead24" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M327.51171875,57.10396364987283L407.9609375,83L407.9609375,108" marker-end="url(#arrowhead25)" style="fill:none"></path><defs><marker id="arrowhead25" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M118.92267400568181,146L76.6796875,171L76.6796875,196" marker-end="url(#arrowhead26)" style="fill:none"></path><defs><marker id="arrowhead26" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M183.1320134943182,146L225.375,171L225.375,196" marker-end="url(#arrowhead27)" style="fill:none"></path><defs><marker id="arrowhead27" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M76.6796875,234L76.6796875,259L76.6796875,284" marker-end="url(#arrowhead28)" style="fill:none"></path><defs><marker id="arrowhead28" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M225.375,234L225.375,259L225.375,284" marker-end="url(#arrowhead29)" style="fill:none"></path><defs><marker id="arrowhead29" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M382.9593394886364,146L350.0625,171L350.0625,196" marker-end="url(#arrowhead30)" style="fill:none"></path><defs><marker id="arrowhead30" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M432.9625355113636,146L465.859375,171L465.859375,196" marker-end="url(#arrowhead31)" style="fill:none"></path><defs><marker id="arrowhead31" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M350.0625,234L350.0625,259L350.0625,284" marker-end="url(#arrowhead32)" style="fill:none"></path><defs><marker id="arrowhead32" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M465.859375,234L465.859375,259L465.859375,284" marker-end="url(#arrowhead33)" style="fill:none"></path><defs><marker id="arrowhead33" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity: 1;" transform=""><g transform="translate(0,0)" class="label"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform=""><g transform="translate(0,0)" class="label"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform=""><g transform="translate(0,0)" class="label"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform=""><g transform="translate(0,0)" class="label"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform=""><g transform="translate(0,0)" class="label"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform=""><g transform="translate(0,0)" class="label"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform=""><g transform="translate(0,0)" class="label"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform=""><g transform="translate(0,0)" class="label"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform=""><g transform="translate(0,0)" class="label"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform=""><g transform="translate(0,0)" class="label"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g></g><g class="nodes"><g class="node" id="A" transform="translate(271.26953125,39)" style="opacity: 1;"><rect rx="0" ry="0" x="-56.2421875" y="-19" width="112.484375" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-46.2421875,-9)"><foreignObject width="92.484375" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Type System</div></foreignObject></g></g></g><g class="node" id="B" transform="translate(151.02734375,127)" style="opacity: 1;"><rect rx="5" ry="5" x="-35.3515625" y="-19" width="70.703125" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-25.3515625,-9)"><foreignObject width="50.703125" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">When?</div></foreignObject></g></g></g><g class="node" id="C" transform="translate(407.9609375,127)" style="opacity: 1;"><rect rx="5" ry="5" x="-50.8984375" y="-19" width="101.796875" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-40.8984375,-9)"><foreignObject width="81.796875" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">How Strict?</div></foreignObject></g></g></g><g class="node" id="D" transform="translate(76.6796875,215)" style="opacity: 1;"><rect rx="5" ry="5" x="-56.6796875" y="-19" width="113.359375" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-46.6796875,-9)"><foreignObject width="93.359375" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Compile time</div></foreignObject></g></g></g><g class="node" id="E" transform="translate(225.375,215)" style="opacity: 1;"><rect rx="5" ry="5" x="-42.015625" y="-19" width="84.03125" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-32.015625,-9)"><foreignObject width="64.03125" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Run time</div></foreignObject></g></g></g><g class="node" id="F" transform="translate(76.6796875,303)" style="opacity: 1;"><rect rx="5" ry="5" x="-30.0078125" y="-19" width="60.015625" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-20.0078125,-9)"><foreignObject width="40.015625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Static</div></foreignObject></g></g></g><g class="node" id="G" transform="translate(225.375,303)" style="opacity: 1;"><rect rx="5" ry="5" x="-41.1171875" y="-19" width="82.234375" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-31.1171875,-9)"><foreignObject width="62.234375" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Dynamic</div></foreignObject></g></g></g><g class="node" id="H" transform="translate(350.0625,215)" style="opacity: 1;"><rect rx="5" ry="5" x="-28.2265625" y="-19" width="56.453125" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-18.2265625,-9)"><foreignObject width="36.453125" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Strict</div></foreignObject></g></g></g><g class="node" id="I" transform="translate(465.859375,215)" style="opacity: 1;"><rect rx="5" ry="5" x="-37.5703125" y="-19" width="75.140625" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-27.5703125,-9)"><foreignObject width="55.140625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Flexible</div></foreignObject></g></g></g><g class="node" id="J" transform="translate(350.0625,303)" style="opacity: 1;"><rect rx="5" ry="5" x="-33.5703125" y="-19" width="67.140625" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-23.5703125,-9)"><foreignObject width="47.140625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Strong</div></foreignObject></g></g></g><g class="node" id="K" transform="translate(465.859375,303)" style="opacity: 1;"><rect rx="5" ry="5" x="-30.3046875" y="-19" width="60.609375" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-20.3046875,-9)"><foreignObject width="40.609375" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Weak</div></foreignObject></g></g></g></g></g></g></svg> </div> <p><br/></p> <h4 id="type-checking-when-static-versus-dynamic">Type Checking (When?): Static versus Dynamic</h4> <p>Type checking determines <b>when</b> types are checked and verified. For example, a <b>dynamically-typed</b> programming language checks for the types during <b> run time</b>. However, a <b> statically-typed</b> language checks the types and any syntactic errors during the <b>compile time</b> (before the actual running or execution of the code). JavaScript, PHP, Python and Ruby are examples of dynamically-typed languages. For example, in JavaScript, you can write:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">let</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span></code></pre></figure> <p>So, in the above statement, we have declared a variable without explicitly specifying the data type. The JavaScript interpreter assigns the proper type based on the given value (which will be a number in the above example) and checks for type errors during the run-time. On the other hand, Java, C, C++, Go and Scala are examples of statically-typed languages. Using a statically-typed langauage means that you must explicitly declare the type of the variable. For example, Java would throw a compile-time error if you forgot to specify the type in the following statement.</p> <figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span></code></pre></figure> <blockquote> Compile time type checking is static, while run time checking is dynamic. Static typing can help catch errors at compile time, and can also improve the performance of a program. Howver, a dynamically typed language is usually flexible and easier to use, but can result in more run time errors. </blockquote> <h4 id="type-safety-how-strictserious-weak-versus-strong">Type Safety (How Strict/Serious?): Weak versus Strong</h4> <p><b>Strongly typed</b> programming languages ‚Äã‚Äãhave <b>stricter typing rules</b>, such as preventing the use of a variable in a way that is incompatible with its type. However, <b>weakly typed</b> languages ‚Äã‚Äãhave more <b>flexible and relaxed typing rules</b>. For example, in a strongly typed language, an explicit data type conversion may be required even if the implicit data type conversion does not cause any problems. Strong and weak typing is a somewhat relative spectrum and not fixed classes, so the typing system of a language may be stronger or weaker than the other. For example, PHP can be classified as a weakly typed language; however, it is more strongly typed than JavaScript. Moreover, strong and weak typing are not related to static and dynamic typing. For example, a dynamically typed language could be either strongly or weakly typed and vice versa. For example, Python is both dynamically- and strongly-typed, as shown in the following type system quadrant:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/TypeSystemQuadrant.PNG" class="img-fluid rounded " width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <blockquote> Strict? Strong, else weak. </blockquote> <hr/> <p>Try the following code in JavaScript to understand how a weekly-typed language could behave:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre>    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">7</span><span class="dl">"</span> <span class="o">+</span> <span class="mi">3</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">7</span><span class="dl">"</span> <span class="o">*</span> <span class="mi">3</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">7</span><span class="dl">"</span> <span class="o">/</span> <span class="mi">3</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="kc">true</span> <span class="o">/</span> <span class="mi">3</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="kc">true</span> <span class="o">+</span> <span class="mi">3</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="kc">false</span> <span class="o">+</span> <span class="mi">3</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure> <hr/> <h4 id="test-your-understanding">Test your Understanding</h4> <ol> <li>Which of the following describes <code class="language-plaintext highlighter-rouge">static typing</code>? <ul> <li>A. Type checking is performed at run time</li> <li>B. Type checking is performed at compile time</li> <li>C. Type checking is performed at run and compile times</li> </ul> </li> <li>Which of the following describes <code class="language-plaintext highlighter-rouge">dynamic typing</code>? <ul> <li>A. Type checking is performed at run time</li> <li>B. Type checking is performed at compile time</li> <li>C. Type checking is performed at run and compile times</li> </ul> </li> <li>Which of the following describes <code class="language-plaintext highlighter-rouge">strong typing</code>? <ul> <li>A. Type checking is strict and will not allow operations between incompatible types without type conversion</li> <li>B. Type checking is lenient and will allow operations between incompatible types</li> <li>C. Type checking is always static in strong typing</li> <li>C. Type checking is always dynamic in weak typing</li> </ul> </li> <li>Which of the following describes <code class="language-plaintext highlighter-rouge">weak typing</code>? <ul> <li>A. Type checking is strict and will not allow operations between incompatible types without conversion</li> <li>B. Type checking is lenient and will allow operations between incompatible types</li> <li>C. Type checking is always static in strong typing</li> <li>D. Type checking is always dynamic in weak typing</li> </ul> </li> <li>Which of the following languages is <code class="language-plaintext highlighter-rouge">dynamically typed</code>? <ul> <li>A. Java</li> <li>B. JavaScript</li> <li>C. C++</li> <li>D. Go</li> </ul> </li> </ol>]]></content><author><name></name></author><category term="JavaScript"/><category term="JavaScript,"/><category term="Type-System,"/><category term="dynamic-typing,"/><category term="static-typing,"/><category term="weak-typing,"/><category term="strong-typing"/><summary type="html"><![CDATA[Explaining the concept of type systems in programming languages. You will understand the difference between static and dyanmic typing as well as strong and weak typing. You will also learn that JavaScript is dynamically and weakly typed language.]]></summary></entry><entry><title type="html">ES modules - A cartoon deep-dive</title><link href="https://amosa.github.io/blog/2022/es-modules-cartoon-deep-dive/" rel="alternate" type="text/html" title="ES modules - A cartoon deep-dive"/><published>2022-02-01T17:39:00+00:00</published><updated>2022-02-01T17:39:00+00:00</updated><id>https://amosa.github.io/blog/2022/es-modules-cartoon-deep-dive</id><content type="html" xml:base="https://amosa.github.io/blog/2022/es-modules-cartoon-deep-dive/"><![CDATA[]]></content><author><name></name></author><category term="JavaScript"/><summary type="html"><![CDATA[you can also redirect to assets like pdf]]></summary></entry></feed>